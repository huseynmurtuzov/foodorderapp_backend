// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YemekSepeti.Models;

#nullable disable

namespace YemekSepeti.Migrations
{
    [DbContext(typeof(YemekSepetContext))]
    [Migration("20241204155745_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryMeal", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("MealsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "MealsId");

                    b.HasIndex("MealsId");

                    b.ToTable("CategoryMeal");
                });

            modelBuilder.Entity("CategoryRestaurant", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "RestaurantsId");

                    b.HasIndex("RestaurantsId");

                    b.ToTable("CategoryRestaurant");
                });

            modelBuilder.Entity("CustomerRestaurant", b =>
                {
                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantsId")
                        .HasColumnType("int");

                    b.HasKey("CustomersId", "RestaurantsId");

                    b.HasIndex("RestaurantsId");

                    b.ToTable("CustomerRestaurant");
                });

            modelBuilder.Entity("MealOrder", b =>
                {
                    b.Property<int>("MealsId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.HasKey("MealsId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("MealOrder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser<int>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YemekSepeti.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Fast Food"
                        });
                });

            modelBuilder.Entity("YemekSepeti.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = -9,
                            Address = "Yakutiye,Erzurum",
                            Email = "fatimemurtuzova@gmail.com",
                            Name = "Fatime Murtuzova",
                            Password = "Fatime1234!",
                            PhoneNumber = "05053661826"
                        });
                });

            modelBuilder.Entity("YemekSepeti.Models.DeliveryPersonnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VeichleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryPersonnel");

                    b.HasData(
                        new
                        {
                            Id = -10,
                            Email = "hakanyildiz@gmail.com",
                            Name = "Hakan Yıldız",
                            Password = "Hakan1234!",
                            PhoneNumber = "0538 613 36 08",
                            VeichleType = "Araba"
                        });
                });

            modelBuilder.Entity("YemekSepeti.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Description = "Özel fırın lavaşa; 75 gr. tavuk döner, salatalık turşusu, patates kızartması, özel sos, isteğe göre soğan, sarımsaklı mayonez sos. Cin biberi ile",
                            Image = "https://images.deliveryhero.io/image/fd-tr/tr-logos/cp9bu-logo.jpg",
                            IsAvailable = true,
                            Name = "Tavuk Döner Medium Dürüm",
                            Price = 150m,
                            Quantity = 1,
                            RestaurantId = -1
                        },
                        new
                        {
                            Id = -2,
                            Description = "2 adet özel fırın lavaşa; 125 gr. tavuk döner, patates kızartması, salatalık turşusu, özel sos, isteğe göre soğan, sarımsaklı mayonez sos. Cin biberi ile",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/10775609.jpg??width=500",
                            IsAvailable = true,
                            Name = "Tavuk Döner XLarge Dürüm (45 cm.)",
                            Price = 205m,
                            Quantity = 1,
                            RestaurantId = -1
                        },
                        new
                        {
                            Id = -3,
                            Description = "Dilimlenmiş patateslerin kızartılarak koni şeklinde kartonda servis edildiği bir atıştırmalıktır.",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/10775630.jpg??width=500",
                            IsAvailable = true,
                            Name = "Külah Patates Kızartması",
                            Price = 50m,
                            Quantity = 1,
                            RestaurantId = -1
                        },
                        new
                        {
                            Id = -4,
                            Description = "Large Tavuk Döner Dürüm (45 cm.) + Ayran (27 cl.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/10775572.jpg??width=500",
                            IsAvailable = true,
                            Name = "Tavuk Döner Large Dürüm Menü",
                            Price = 210m,
                            Quantity = 1,
                            RestaurantId = -1
                        },
                        new
                        {
                            Id = -5,
                            Description = "Özel fırın lavaşa; 50 gr. tavuk döner, patates kızartması, salatalık turşusu, özel sos, isteğe göre soğan, sarımsaklı mayonez sos. Cin biberi ile",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/10775606.jpg??width=500",
                            IsAvailable = true,
                            Name = "Tavuk Döner Small Dürüm",
                            Price = 125m,
                            Quantity = 1,
                            RestaurantId = -1
                        },
                        new
                        {
                            Id = -6,
                            Description = "Ev yapımı hamburger ekmeği, ev yapımı hamburger köftesi, Musqa sos, domates, yeşillik, turşu. Patates kızartması ile",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/26725904.jpg??width=500",
                            IsAvailable = true,
                            Name = "Musqa Burger",
                            Price = 249.90m,
                            Quantity = 1,
                            RestaurantId = -2
                        },
                        new
                        {
                            Id = -7,
                            Description = "Ev yapımı hamburger ekmeği, ev yapımı tavuk burger köftesi, özel sos, mayonez, domates, yeşillik. Patates kızartması ile",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/26727171.jpg??width=500",
                            IsAvailable = true,
                            Name = "Musqa Chicken Burger",
                            Price = 200.90m,
                            Quantity = 1,
                            RestaurantId = -2
                        },
                        new
                        {
                            Id = -8,
                            Description = "Ev yapımı hamburger ekmeği, ev yapımı hamburger köftesi, Musqa sos, cheddar peyniri, soğan, turşu, domates, yeşillik. Patates kızartması ile",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/26725995.jpg??width=500",
                            IsAvailable = true,
                            Name = "Musqa Rich Burger",
                            Price = 263.90m,
                            Quantity = 1,
                            RestaurantId = -2
                        },
                        new
                        {
                            Id = -9,
                            Description = "Ev yapımı hamburger ekmeği, ev yapımı 2 adet 70 gr. hamburger köftesi, özel sos, double cheddar peyniri, dana jambon, eritilmiş kaşar peyniri. Patates kızartması ile",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/29087186.jpg??width=500",
                            IsAvailable = true,
                            Name = "Big Boss Burger",
                            Price = 299.90m,
                            Quantity = 1,
                            RestaurantId = -2
                        },
                        new
                        {
                            Id = -10,
                            Description = "7 adet soğan halkası",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/7506896.jpg??width=500",
                            IsAvailable = true,
                            Name = "Soğan Halkası (7 Adet)",
                            Price = 45m,
                            Quantity = 1,
                            RestaurantId = -2
                        },
                        new
                        {
                            Id = -11,
                            Description = "2 Adet Whopper Jr.® + Patates Kızartması (Orta) + Soğan Halkası (4'lü) + 1 L. İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/44479596.jpg??width=500",
                            IsAvailable = true,
                            Name = "Yemeksepeti Özel 2’li Whopper Jr.® Kampanyası",
                            Price = 220m,
                            Quantity = 1,
                            RestaurantId = -3
                        },
                        new
                        {
                            Id = -12,
                            Description = "Big King® + King Chicken® + Patates Kızartması (Orta) + 1 L. İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/27388696.jpg??width=500",
                            IsAvailable = true,
                            Name = "Kral İkili",
                            Price = 280m,
                            Quantity = 1,
                            RestaurantId = -3
                        },
                        new
                        {
                            Id = -13,
                            Description = "Whopper® + Patates Kızartması (Orta) + Kutu İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/27388717.jpg??width=500",
                            IsAvailable = true,
                            Name = "Whopper® Menü",
                            Price = 235m,
                            Quantity = 1,
                            RestaurantId = -3
                        },
                        new
                        {
                            Id = -14,
                            Description = "Big King® + Patates Kızartması (Orta) + Kutu İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/27388722.jpg??width=500",
                            IsAvailable = true,
                            Name = "Big King® Menü",
                            Price = 230m,
                            Quantity = 1,
                            RestaurantId = -3
                        },
                        new
                        {
                            Id = -15,
                            Description = "Big King® + Big King® + Patates Kızartması (Orta) + Coca-Cola (1 L.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/27388683.jpg??width=500",
                            IsAvailable = true,
                            Name = "Coca-Cola Fırsatı (2'li Big King® Fırsatı)",
                            Price = 380m,
                            Quantity = 1,
                            RestaurantId = -3
                        },
                        new
                        {
                            Id = -16,
                            Description = "Pizza sosu, mozzarella peyniri, sucuk, salam, mantar, mısır, zeytin, kapya biberi, jalapeno biberi, çarliston biber",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37824103.jpg??width=500",
                            IsAvailable = true,
                            Name = "Karışık Pizza (Orta)",
                            Price = 190m,
                            Quantity = 1,
                            RestaurantId = -4
                        },
                        new
                        {
                            Id = -17,
                            Description = "Pizza sosu, mozzarella peyniri, sucuk, salam, mantar, mısır, zeytin, kapya biberi, jalapeno biberi, çarliston biber",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37824108.jpg??width=500",
                            IsAvailable = true,
                            Name = "Karışık Pizza (Büyük)",
                            Price = 275m,
                            Quantity = 1,
                            RestaurantId = -4
                        },
                        new
                        {
                            Id = -18,
                            Description = "Parmak dilim patatas kızartması",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37824124.jpg??width=500",
                            IsAvailable = true,
                            Name = "Patates Kızartması",
                            Price = 65m,
                            Quantity = 1,
                            RestaurantId = -4
                        },
                        new
                        {
                            Id = -19,
                            Description = "Karışık Pizza (Orta) + Patates Kızartması + Kutu İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37824095.jpg??width=500",
                            IsAvailable = true,
                            Name = "Orta Boy Menü",
                            Price = 275m,
                            Quantity = 1,
                            RestaurantId = -4
                        },
                        new
                        {
                            Id = -20,
                            Description = "Pizza sosu, mozzarella peyniri, sucuk, salam, mantar, mısır, zeytin, kapya biberi, jalapeno biberi, çarliston biber\r\n\r\n",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37824098.jpg??width=500",
                            IsAvailable = true,
                            Name = "Karışık Pizza (Küçük)",
                            Price = 149m,
                            Quantity = 1,
                            RestaurantId = -4
                        },
                        new
                        {
                            Id = -21,
                            Description = "2 Adet Popchicken Sandviç + Patates Kızartması (Orta) + Nuggets (4'lü) + Soğan Halkası (4'lü) + 1L. İçecek\r\n\r\n",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/45539560.jpg??width=500",
                            IsAvailable = true,
                            Name = "Yemeksepeti Özel 2 Kişilik Ekonomik Menü",
                            Price = 280m,
                            Quantity = 1,
                            RestaurantId = -5
                        },
                        new
                        {
                            Id = -22,
                            Description = "2 Adet Tavukburger® + Patates Kızartması (Orta) + Seçeceğiniz 2 Adet Sos + İçecek (1 L.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/62936401.jpg??width=500",
                            IsAvailable = true,
                            Name = "Yemeksepeti Özel Ekonomix Menü",
                            Price = 210m,
                            Quantity = 1,
                            RestaurantId = -5
                        },
                        new
                        {
                            Id = -23,
                            Description = "Popeyes XL Sandviç + Acılı Kanat (2'li) + Nuggets (4'lü) + Patates Kızartması (Orta) + Kutu İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/28499489.jpg??width=500",
                            IsAvailable = true,
                            Name = "Maxi XL Menü",
                            Price = 290m,
                            Quantity = 1,
                            RestaurantId = -5
                        },
                        new
                        {
                            Id = -24,
                            Description = "2 Adet Poppy Sandviç + Nuggets (4'lü) + Soğan Halkası (4'lü) + Tenders (2'li) + Patates Kızartması (Orta) +1L. İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/28499446.jpg??width=500",
                            IsAvailable = true,
                            Name = "2 Kişilik Fırsat Menüsü",
                            Price = 310m,
                            Quantity = 1,
                            RestaurantId = -5
                        },
                        new
                        {
                            Id = -25,
                            Description = "3 Adet Tavukburger® + Nuggets (12'li) + Patates Kızartması (Büyük) + Seçeceğiniz 2 Adet Sos + 1L. İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/28499435.jpg??width=500",
                            IsAvailable = true,
                            Name = "Coca-Cola Fırsatı (3 Kişilik Doyuran Kova)",
                            Price = 390m,
                            Quantity = 1,
                            RestaurantId = -5
                        },
                        new
                        {
                            Id = -26,
                            Description = "80 gr. tavuk döner, patates kızartması, turşu, özel Öncü sos, sarımsaklı mayonez",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61470322.jpg??width=500",
                            IsAvailable = true,
                            Name = "Tavuk Döner Dürüm (80 gr.)",
                            Price = 110.42m,
                            Quantity = 1,
                            RestaurantId = -6
                        },
                        new
                        {
                            Id = -27,
                            Description = "2 Adet Tavuk Döner Dürüm (80 gr.) + 2 Adet Patates Kızartması + İçecek (1 L.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/30279841.jpg??width=500",
                            IsAvailable = true,
                            Name = "Kazandıran Menü",
                            Price = 229.49m,
                            Quantity = 1,
                            RestaurantId = -6
                        },
                        new
                        {
                            Id = -28,
                            Description = "120 gr. tavuk döner, patates kızartması, turşu, özel Öncü sos, sarımsaklı mayonez",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61470323.jpg??width=500",
                            IsAvailable = true,
                            Name = "Öncü Zurna Tavuk Döner Dürüm (120 gr.)",
                            Price = 144.42m,
                            Quantity = 1,
                            RestaurantId = -6
                        },
                        new
                        {
                            Id = -29,
                            Description = "Tavuk Döner Dürüm (80 gr.) + Patates Kızartması + Sütaş Ayran (27.5 cl.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61470317.jpg??width=500",
                            IsAvailable = true,
                            Name = "Avantajlı Tavuk Döner Dürüm Menü",
                            Price = 174.24m,
                            Quantity = 1,
                            RestaurantId = -6
                        },
                        new
                        {
                            Id = -30,
                            Description = "100 gr.",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61470328.jpg??width=500",
                            IsAvailable = true,
                            Name = "Patates Kızartması (100 gr.)",
                            Price = 42.41m,
                            Quantity = 1,
                            RestaurantId = -6
                        },
                        new
                        {
                            Id = -31,
                            Description = "2 Adet Tavuk Döner Dürüm (80 gr.) + Patates Kızartması + içecek (1 L.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61482869.jpg??width=500",
                            IsAvailable = true,
                            Name = "İkili Menü",
                            Price = 305.91m,
                            Quantity = 1,
                            RestaurantId = -6
                        },
                        new
                        {
                            Id = -32,
                            Description = "Tavuk Döner Dürüm (80 gr.) + Patates Kızartması + İçecek (33 cl.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61470321.jpg??width=500",
                            IsAvailable = true,
                            Name = "Combo Tavuk Döner Dürüm Menü",
                            Price = 178.42m,
                            Quantity = 1,
                            RestaurantId = -6
                        },
                        new
                        {
                            Id = -33,
                            Description = "Öncü Zurna Tavuk Döner Dürüm (120 gr.) + Patates Kızartması + İçecek (33 cl.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61471097.jpg??width=500",
                            IsAvailable = true,
                            Name = "Combo Öncü Zurna Tavuk Döner Dürüm Menü",
                            Price = 212.42m,
                            Quantity = 1,
                            RestaurantId = -6
                        },
                        new
                        {
                            Id = -34,
                            Description = "Kuşbaşı et, kaşar peyniri",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61276437.jpg??width=500",
                            IsAvailable = true,
                            Name = "Kuşbaşılı Kaşarlı Pide",
                            Price = 260m,
                            Quantity = 1,
                            RestaurantId = -7
                        },
                        new
                        {
                            Id = -35,
                            Description = "Salata, sumak, meze ile",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/9802942.jpg??width=500",
                            IsAvailable = true,
                            Name = "Lahmacun",
                            Price = 80m,
                            Quantity = 1,
                            RestaurantId = -7
                        },
                        new
                        {
                            Id = -36,
                            Description = "Kıyma, soğan",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61276434.jpg??width=500",
                            IsAvailable = true,
                            Name = "Kapalı Kıymalı Pide",
                            Price = 210m,
                            Quantity = 1,
                            RestaurantId = -7
                        },
                        new
                        {
                            Id = -37,
                            Description = "Özel kavurmalı",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61276439.jpg??width=500",
                            IsAvailable = true,
                            Name = "Kavurmalı Pide (Kapalı)",
                            Price = 290m,
                            Quantity = 1,
                            RestaurantId = -7
                        },
                        new
                        {
                            Id = -38,
                            Description = "Kıyma, kavurma, kaşar peyniri, salam, sucuk, sosis",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/65580785.jpg??width=500",
                            IsAvailable = true,
                            Name = "Açık Lapidis Özel Karışık",
                            Price = 270m,
                            Quantity = 1,
                            RestaurantId = -7
                        },
                        new
                        {
                            Id = -39,
                            Description = "Günlük, taze, sinirsiz et",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61276436.jpg??width=500",
                            IsAvailable = true,
                            Name = "Kuşbaşılı Pide",
                            Price = 260m,
                            Quantity = 1,
                            RestaurantId = -7
                        },
                        new
                        {
                            Id = -40,
                            Description = "Dana sucuk, taze kaşar peyniri",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/61276438.jpg??width=500",
                            IsAvailable = true,
                            Name = "Sucuklu Kaşarlı Pide",
                            Price = 240m,
                            Quantity = 1,
                            RestaurantId = -7
                        },
                        new
                        {
                            Id = -41,
                            Description = "Tavuk döner, kaşar peyniri",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/66786044.jpg??width=500",
                            IsAvailable = true,
                            Name = "Döner Pide",
                            Price = 170m,
                            Quantity = 1,
                            RestaurantId = -7
                        },
                        new
                        {
                            Id = -42,
                            Description = "3 Adet Baget Et Döner + Patates Kızartması (Büyük) + Soğan Halkası (6’lı) + İçecek (1 L.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37095618.jpg??width=500",
                            IsAvailable = true,
                            Name = "3'lü Baget Et Döner Menü",
                            Price = 360m,
                            Quantity = 1,
                            RestaurantId = -8
                        },
                        new
                        {
                            Id = -43,
                            Description = "İskender sosu, İskender tereyağı, sivri biber, domates, yoğurt",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37095662.jpg??width=500",
                            IsAvailable = true,
                            Name = "UD® Et İskender",
                            Price = 255m,
                            Quantity = 1,
                            RestaurantId = -8
                        },
                        new
                        {
                            Id = -44,
                            Description = "2 Adet Tombik Et Döner + Patates Kızartması (Orta) + (İçecek 1 L.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37095624.jpg??width=500",
                            IsAvailable = true,
                            Name = "2’li Tombik Et Döner Menü",
                            Price = 340m,
                            Quantity = 1,
                            RestaurantId = -8
                        },
                        new
                        {
                            Id = -45,
                            Description = "2 Adet Baget Tavuk Döner + Patates Kızartması (Orta) + Ayran (20 cl.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/12742732.jpg??width=500",
                            IsAvailable = true,
                            Name = "2'li Baget Tavuk Döner Menü",
                            Price = 185m,
                            Quantity = 1,
                            RestaurantId = -8
                        },
                        new
                        {
                            Id = -46,
                            Description = "Dürüm Et Döner + Patates Kızartması (Orta) + Ayran (20 cl.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37095643.jpg??width=500",
                            IsAvailable = true,
                            Name = "Dürüm Et Döner Menü",
                            Price = 240m,
                            Quantity = 1,
                            RestaurantId = -8
                        },
                        new
                        {
                            Id = -47,
                            Description = "Dürüm Tavuk Döner + Patates Kızartması (Orta) + Ayran (20 cl.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37095642.jpg??width=500",
                            IsAvailable = true,
                            Name = "Dürüm Tavuk Döner Menü",
                            Price = 190m,
                            Quantity = 1,
                            RestaurantId = -8
                        },
                        new
                        {
                            Id = -48,
                            Description = "3 Adet Baget Tavuk Döner + Patates Kızartması (Büyük) + Soğan Halkası (6’lı) + Coca-Cola (1 L.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37095608.jpg??width=500",
                            IsAvailable = true,
                            Name = "Coca-Cola Fırsatı (Seçmeli Baget Menü)",
                            Price = 260m,
                            Quantity = 1,
                            RestaurantId = -8
                        },
                        new
                        {
                            Id = -49,
                            Description = "3 Adet Dürüm Tavuk Döner + Patates Kızartması (Büyük) + Soğan Halkası (6'lı) + Coca-Cola (1 L.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/37095605.jpg??width=500",
                            IsAvailable = true,
                            Name = "Coca-Cola Fırsatı (3'lü Dürüm Menü)",
                            Price = 440m,
                            Quantity = 1,
                            RestaurantId = -8
                        },
                        new
                        {
                            Id = -50,
                            Description = "2 Adet Maytako (50 gr. tavuk döner, tortilla lavaş, chedar peyniri, salatalık turşusu, patates kızartması, soğan, acılı sarımsaklı mayonez sos. Cin biberi ile)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/10775561.jpg??width=500",
                            IsAvailable = true,
                            Name = "Maytako (Tavuk Dönerden) 2 Adet",
                            Price = 190m,
                            Quantity = 0,
                            RestaurantId = -1
                        },
                        new
                        {
                            Id = -51,
                            Description = "2 Adet Maytako (50 gr. et döner, tortilla lavaş, chedar peyniri, salatalık turşusu, patates kızartması, soğan, acılı sarımsaklı mayonez sos. Cin biberi ile)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/10775562.jpg??width=500",
                            IsAvailable = true,
                            Name = "Maytako (Et Dönerden) 2 Adet",
                            Price = 280m,
                            Quantity = 0,
                            RestaurantId = -1
                        },
                        new
                        {
                            Id = -52,
                            Description = "4 Adet Maytako Tavuk Döner + 2'li Külah Patates Kızartması + İçecek (1 L.)",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/10775565.jpg??width=500",
                            IsAvailable = true,
                            Name = "Maytako Parti (Tavuk Dönerden)",
                            Price = 520m,
                            Quantity = 0,
                            RestaurantId = -1
                        },
                        new
                        {
                            Id = -53,
                            Description = "Ev yapımı hamburger ekmeği, 2 x 70 ev yapım hamburger köftesi, kaşar peyniri (2 adet), cheddar peyniri (2 adet), ortası et soslu lokum bonfile, Musqa sos. Patates kızartması ile",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/26725832.jpg??width=500",
                            IsAvailable = true,
                            Name = "Big Bang Burger",
                            Price = 333.90m,
                            Quantity = 0,
                            RestaurantId = -2
                        },
                        new
                        {
                            Id = -54,
                            Description = "Ev yapımı hamburger ekmeği, ev yapımı hamburger köftesi, sarımsaklı mayonez, ince dilim bonfile, domates, soğan, cheddar peyniri. Patates kızartması ile",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/26726101.jpg??width=500",
                            IsAvailable = true,
                            Name = "Musqover Burger",
                            Price = 318.90m,
                            Quantity = 0,
                            RestaurantId = -2
                        },
                        new
                        {
                            Id = -55,
                            Description = "Ev yapımı hamburger ekmeği, ev yapımı 3 x 70 gr. hamburger köftesi, Musqa sos, közlenmiş biber, 3 adet cheddar peyniri, double dana jambon, karamelize soğan. Patates kızartması ile",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/26726741.jpg??width=500",
                            IsAvailable = true,
                            Name = "Chef - X Burger",
                            Price = 377.90m,
                            Quantity = 0,
                            RestaurantId = -2
                        },
                        new
                        {
                            Id = -56,
                            Description = "Big King® + Whopper® Jr. + Chicken Royale® + Tavuklu Barbekü Deluxe Burger + Patates Kızartması (Büyük) + Soğan Halkası (8'li) + Algida Frigola (570 ml.) yada Algida Maraş Usulü Sade Dondurma (500 ml.) + 1 L. İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/42100301.jpg??width=500",
                            IsAvailable = true,
                            Name = "Algida Menü (Algida’lı Dev Menü)",
                            Price = 600m,
                            Quantity = 0,
                            RestaurantId = -3
                        },
                        new
                        {
                            Id = -57,
                            Description = "Double Cheese Burger + Patates Kızartması (Orta) + Seçeceğin Algida Max + Kutu İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/28459724.jpg??width=500",
                            IsAvailable = true,
                            Name = "Tek Kişilik Algida Menü",
                            Price = 235m,
                            Quantity = 0,
                            RestaurantId = -3
                        },
                        new
                        {
                            Id = -58,
                            Description = "3 Adet Seçeceğiniz Sandviç + Patates Kızartması (Büyük) + 1 L. İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/27388702.jpg??width=500",
                            IsAvailable = true,
                            Name = "Benim Üçlüm",
                            Price = 295m,
                            Quantity = 0,
                            RestaurantId = -3
                        },
                        new
                        {
                            Id = -59,
                            Description = "4 adet",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/6492540.jpg??width=500",
                            IsAvailable = true,
                            Name = "Mozzarella Sticks (4 Adet)",
                            Price = 65m,
                            Quantity = 0,
                            RestaurantId = -4
                        },
                        new
                        {
                            Id = -60,
                            Description = "250 gr. patates kızartması, 4 adet nugget, 4 adet soğan halkası, 4 adet mozzarella sticks",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/35603055.jpg??width=500",
                            IsAvailable = true,
                            Name = "Cheff Box",
                            Price = 199m,
                            Quantity = 0,
                            RestaurantId = -4
                        },
                        new
                        {
                            Id = -61,
                            Description = "Tavuk, mozzarella peyniri, pizza sosu",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/6492527.jpg??width=500",
                            IsAvailable = true,
                            Name = "Cheff Chicken Pizza (Büyük Boy)",
                            Price = 275m,
                            Quantity = 0,
                            RestaurantId = -4
                        },
                        new
                        {
                            Id = -62,
                            Description = "Popchicken + Büyük Boy Patates + 4’lü Soğan Halkası + 4’lü Nuggets + Magnum Mini Badem + Kutu İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/68486480.jpg??width=500",
                            IsAvailable = true,
                            Name = "Algida Menüsü (Algida Keyif)",
                            Price = 270m,
                            Quantity = 0,
                            RestaurantId = -5
                        },
                        new
                        {
                            Id = -63,
                            Description = "2 Adet Tavukburger® + Patates Kızartması (Orta) + 1L. İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/28499447.jpg??width=500",
                            IsAvailable = true,
                            Name = "Ekonomix Menü",
                            Price = 220m,
                            Quantity = 0,
                            RestaurantId = -5
                        },
                        new
                        {
                            Id = -64,
                            Description = "3 adet Poppy Sandviç + Patates Kızartması (Büyük) + Nuggets (12’li) + Tenders (3'lü) + 1L. İçecek",
                            Image = "https://images.deliveryhero.io/image/fd-tr/Products/65679780.jpg??width=500",
                            IsAvailable = true,
                            Name = "Beşiktaş Taraftar Menüsü",
                            Price = 430m,
                            Quantity = 0,
                            RestaurantId = -5
                        });
                });

            modelBuilder.Entity("YemekSepeti.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryPersonelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryPersonelId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("YemekSepeti.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("YemekSepeti.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Address = "MERSIS No: 0773072861500001",
                            Email = "maydanozdoner@gmail.com",
                            Image = "https://images.deliveryhero.io/image/fd-tr/tr-logos/cp9bu-logo.jpg",
                            Name = "Maydonoz Döner",
                            Password = "Maydanozdoner1234!",
                            PhoneNumber = "(0442) 238 23 22",
                            Rating = 3.2999999999999998,
                            WorkingHours = "11:00 - 23:59"
                        },
                        new
                        {
                            Id = -2,
                            Address = "Ömer Nasuhi Bilmen Mahallesi Kombina Caddesi No:9 Yakutiye Erzurum",
                            Email = "musqaburger@gmail.com",
                            Image = "https://images.deliveryhero.io/image/fd-tr/tr-logos/ch8or-logo.jpg",
                            Name = "Musqa Burger",
                            Password = "Musqaburger1234!",
                            PhoneNumber = "0545 442 85 25",
                            Rating = 3.8999999999999999,
                            WorkingHours = "11:00 - 01:00"
                        },
                        new
                        {
                            Id = -3,
                            Address = "Palerium AVM,No:22/3 Mağaza:100",
                            Email = "burgerking@gmail.com",
                            Image = "https://images.deliveryhero.io/image/fd-tr/tr-logos/cl3by-logo.jpg",
                            Name = "Burger King",
                            Password = "Burgerking1234!",
                            PhoneNumber = "444 5 464",
                            Rating = 3.7999999999999998,
                            WorkingHours = "11:00 - 22:00"
                        },
                        new
                        {
                            Id = -4,
                            Address = "GEZ Mah. Spor Yolu Sokak Alin Sitesi NO:52 Düzgün Market ilerisi YAKUTİYE ERZURUM",
                            Email = "cheffpizza@gmail.com",
                            Image = "https://images.deliveryhero.io/image/fd-tr/LH/jbue-listing.jpg",
                            Name = "Cheff Pizza",
                            Password = "Chefpizza1234!",
                            PhoneNumber = "0553 697 79 42",
                            Rating = 4.4000000000000004,
                            WorkingHours = "11:00 - 02:00"
                        },
                        new
                        {
                            Id = -5,
                            Address = "Yukarı Mumcu Mah. Cumhuriyet Caddesi No: 22/3 MGZ No: 100 Palerium AVM Yakutiye",
                            Email = "popeyes@gmail.com",
                            Image = "https://images.deliveryhero.io/image/fd-tr/tr-logos/cr5ff-logo.jpg",
                            Name = "Popeyes",
                            Password = "Poeyes1234!",
                            PhoneNumber = "444 7 677",
                            Rating = 3.2999999999999998,
                            WorkingHours = "11:00 - 22:00"
                        },
                        new
                        {
                            Id = -6,
                            Address = "Bu restoranın adres bilgileri MirtitOrder'da bulunmaktadır",
                            Email = "oncudoner@gmail.com",
                            Image = "https://images.deliveryhero.io/image/fd-tr/tr-logos/co9zi-logo.jpg",
                            Name = "Öncü Döner",
                            Password = "Oncudoner1234!",
                            PhoneNumber = "(0442) 233 05 05",
                            Rating = 3.7999999999999998,
                            WorkingHours = "10:30 - 02:00"
                        },
                        new
                        {
                            Id = -7,
                            Address = "Taşmağazalar Cd. No: 16",
                            Email = "lapidispide@gmail.com",
                            Image = "https://images.deliveryhero.io/image/fd-tr/LH/gp7a-listing.jpg",
                            Name = "Lapidis Pide",
                            Password = "Lapidispide1234!",
                            PhoneNumber = "(0442) 215 48 25",
                            Rating = 4.4000000000000004,
                            WorkingHours = "11:00 - 22:00"
                        },
                        new
                        {
                            Id = -8,
                            Address = "Bu restoranın adres bilgileri MirtitOrder'da bulunmaktadır",
                            Email = "ustadonerci@gmail.com",
                            Image = "https://images.deliveryhero.io/image/fd-tr/tr-logos/cj7mp-logo.jpg",
                            Name = "Usta Dönerci",
                            Password = "Ustadonerci1234!",
                            PhoneNumber = "(0442) 343 99 99",
                            Rating = 3.2000000000000002,
                            WorkingHours = "11:00 - 22:00"
                        });
                });

            modelBuilder.Entity("YemekSepeti.Models.RestaurantReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantReviews");
                });

            modelBuilder.Entity("YemekSepeti.Models.CustomerEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<int>");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("CustomerEntity");
                });

            modelBuilder.Entity("YemekSepeti.Models.DeliveryPersonnelEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<int>");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("DeliveryPersonnelEntity");
                });

            modelBuilder.Entity("YemekSepeti.Models.RestaurantEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<int>");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("RestaurantEntity");
                });

            modelBuilder.Entity("CategoryMeal", b =>
                {
                    b.HasOne("YemekSepeti.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemekSepeti.Models.Meal", null)
                        .WithMany()
                        .HasForeignKey("MealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryRestaurant", b =>
                {
                    b.HasOne("YemekSepeti.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemekSepeti.Models.Restaurant", null)
                        .WithMany()
                        .HasForeignKey("RestaurantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerRestaurant", b =>
                {
                    b.HasOne("YemekSepeti.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemekSepeti.Models.Restaurant", null)
                        .WithMany()
                        .HasForeignKey("RestaurantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MealOrder", b =>
                {
                    b.HasOne("YemekSepeti.Models.Meal", null)
                        .WithMany()
                        .HasForeignKey("MealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemekSepeti.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YemekSepeti.Models.Meal", b =>
                {
                    b.HasOne("YemekSepeti.Models.Restaurant", "Restaurant")
                        .WithMany("Meals")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("YemekSepeti.Models.Order", b =>
                {
                    b.HasOne("YemekSepeti.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemekSepeti.Models.DeliveryPersonnel", "DeliveryPersonel")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryPersonelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemekSepeti.Models.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DeliveryPersonel");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("YemekSepeti.Models.Payment", b =>
                {
                    b.HasOne("YemekSepeti.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("YemekSepeti.Models.RestaurantReview", b =>
                {
                    b.HasOne("YemekSepeti.Models.Customer", "Customer")
                        .WithMany("RestaurantReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemekSepeti.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantReviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("YemekSepeti.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RestaurantReviews");
                });

            modelBuilder.Entity("YemekSepeti.Models.DeliveryPersonnel", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("YemekSepeti.Models.Order", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("YemekSepeti.Models.Restaurant", b =>
                {
                    b.Navigation("Meals");

                    b.Navigation("Orders");

                    b.Navigation("RestaurantReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
